QR Code Generator Service – Technical Documentation

Overview
This service enables generation of customized QR codes, with optional branding and preview, embedded as a dynamic UI (popup/modal) inside a parent application.
	•	Backend: Spring Boot
	•	Frontend: React (hosted separately or embedded)
	•	Integration: Popup in parent app with JWT-based session
	•	Deployment: Modular UI + API microservice

⸻

Architecture Diagram

+------------------------+       +---------------------------+       +---------------------------+
|   Parent Web App       | <---> |   QR Code UI (React)      | <---> |  QR Code API (Spring Boot)|
| (User Logged In + JWT) |       |   (Popup/iframe UI)       |       |   /api/qrcode/generate    |
+------------------------+       +---------------------------+       +---------------------------+

	•	JWT passed from Parent Web App → QR UI
	•	QR UI communicates securely with Spring Boot APIs
	•	QR generation happens server-side with ZXing, returning base64 or file

⸻

Project Structure

qr-service/
├── backend/
│   ├── controller/QRCodeController.java
│   ├── service/QRCodeService.java
│   ├── config/SecurityConfig.java
│   ├── model/QRCodeRequest.java
│   └── util/QRCodeUtil.java
├── frontend/ (built externally)
│   ├── App.jsx
│   └── QRForm.jsx
└── static/ (optional UI embed)


⸻

Session Management
	•	Auth Model: JWT Token passed from parent app to popup UI
	•	Token Transport:
	•	via query param (?token=xyz), OR
	•	via postMessage()
	•	Token Usage: React frontend attaches JWT in API requests:

fetch('/api/qrcode/generate', {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${token}`
  },
  body: formData
});

	•	Spring Security:

@Override
protected void configure(HttpSecurity http) throws Exception {
    http.csrf().disable()
        .authorizeRequests()
        .antMatchers("/api/qrcode/**").authenticated()
        .and()
        .addFilterBefore(jwtTokenFilter(), UsernamePasswordAuthenticationFilter.class);
}


⸻

QR Generation API

Endpoint:
POST /api/qrcode/generate

Request:

Content-Type: multipart/form-data

{
  "url": "https://example.com",
  "name": "Cafe 88",
  "headerText": "Welcome",
  "footerText": "Scan to Join",
  "bgColor": "#ffffff",
  "imageSize": 256,
  "logo": <file>,
  "backgroundImage": <file>
}

Response:

{
  "qrCodeBase64": "data:image/png;base64,..."
}


⸻

Deployment Notes
	•	Frontend can be deployed on Vercel, S3, or inside Spring Boot /static folder
	•	Backend should be served over HTTPS
	•	Ensure secure CORS and JWT expiration handling

⸻

Testing Scenarios
	•	Valid JWT with form data → returns QR code
	•	Expired/missing JWT → 401 error
	•	Custom header/footer rendering
	•	Uploading large files rejected with 50MB max

⸻

Future Enhancements
	•	Download QR code as PNG
	•	Audit trail for generated codes
	•	QR template presets
	•	Admin dashboard for QR code management

⸻

For any integration help or backend changes, contact the QR API service owner.


@startuml
title QR Code Generator Architecture

actor User

rectangle "Parent Web App\n(Session + Auth)" as WebApp {
    User --> WebApp : Logged in\nPasses JWT
}

rectangle "QR Code UI\n(React App as Popup)" as QRUI {
    WebApp --> QRUI : Pass JWT (postMessage or query param)
}

rectangle "QR Code API\n(Spring Boot)" as API {
    QRUI --> API : POST /api/qrcode/generate\n(with JWT)
}

API --> API : Generate QR (ZXing)\nReturn Base64 / PNG

@enduml





={
 {"System","Date","Severity","Count"};
 QUERY({Dashboard!B5:B,"Critical",Dashboard!C5:C; Dashboard!B5:B,"High",Dashboard!D5:D},
       "select 'Transnox', Col1, Col2, Col3 where Col1 is not null",0);
 QUERY({Dashboard!F5:F,"Critical",Dashboard!G5:G; Dashboard!F5:F,"High",Dashboard!H5:H},
       "select 'busn-core', Col1, Col2, Col3 where Col1 is not null",0);
 QUERY({Dashboard!J5:J,"Critical",Dashboard!K5:K; Dashboard!J5:J,"High",Dashboard!L5:L},
       "select 'busn-customer', Col1, Col2, Col3 where Col1 is not null",0);
 QUERY({Dashboard!N5:N,"Critical",Dashboard!O5:O; Dashboard!N5:N,"High",Dashboard!P5:P},
       "select 'busn-product', Col1, Col2, Col3 where Col1 is not null",0);
 QUERY({Dashboard!B28:B,"Critical",Dashboard!C28:C; Dashboard!B28:B,"High",Dashboard!D28:D},
       "select 'busn-transaction', Col1, Col2, Col3 where Col1 is not null",0);
 QUERY({Dashboard!F28:F,"Critical",Dashboard!G28:G; Dashboard!F28:F,"High",Dashboard!H28:H},
       "select 'busn-user', Col1, Col2, Col3 where Col1 is not null",0);
 QUERY({Dashboard!J28:J,"Critical",Dashboard!K28:K; Dashboard!J28:J,"High",Dashboard!L28:L},
       "select 'transit-core', Col1, Col2, Col3 where Col1 is not null",0);
 QUERY({Dashboard!N28:N,"Critical",Dashboard!O28:O; Dashboard!N28:N,"High",Dashboard!P28:P},
       "select 'transit-integration', Col1, Col2, Col3 where Col1 is not null",0);
 QUERY({Dashboard!B54:B,"Critical",Dashboard!C54:C; Dashboard!B54:B,"High",Dashboard!D54:D},
       "select 'transit-parent', Col1, Col2, Col3 where Col1 is not null",0);
 QUERY({Dashboard!F54:F,"Critical",Dashboard!G54:G; Dashboard!F54:F,"High",Dashboard!H54:H},
       "select 'transit-security', Col1, Col2, Col3 where Col1 is not null",0);
 QUERY({Dashboard!J54:J,"Critical",Dashboard!K54:K; Dashboard!J54:J,"High",Dashboard!L54:L},
       "select 'transit-utils', Col1, Col2, Col3 where Col1 is not null",0);
 QUERY({Dashboard!N54:N,"Critical",Dashboard!O54:O; Dashboard!N54:N,"High",Dashboard!P54:P},
       "select 'busn-batch', Col1, Col2, Col3 where Col1 is not null",0);
 QUERY({Dashboard!B77:B,"Critical",Dashboard!C77:C; Dashboard!B77:B,"High",Dashboard!D77:D},
       "select 'keynox', Col1, Col2, Col3 where Col1 is not null",0);
 QUERY({Dashboard!F77:F,"Critical",Dashboard!G77:G; Dashboard!F77:F,"High",Dashboard!H77:H},
       "select 'keymanager', Col1, Col2, Col3 where Col1 is not null",0)
}
