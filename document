QR Code Generator Service – Technical Documentation

Overview
This service enables generation of customized QR codes, with optional branding and preview, embedded as a dynamic UI (popup/modal) inside a parent application.
	•	Backend: Spring Boot
	•	Frontend: React (hosted separately or embedded)
	•	Integration: Popup in parent app with JWT-based session
	•	Deployment: Modular UI + API microservice

⸻

Architecture Diagram

+------------------------+       +---------------------------+       +---------------------------+
|   Parent Web App       | <---> |   QR Code UI (React)      | <---> |  QR Code API (Spring Boot)|
| (User Logged In + JWT) |       |   (Popup/iframe UI)       |       |   /api/qrcode/generate    |
+------------------------+       +---------------------------+       +---------------------------+

	•	JWT passed from Parent Web App → QR UI
	•	QR UI communicates securely with Spring Boot APIs
	•	QR generation happens server-side with ZXing, returning base64 or file

⸻

Project Structure

qr-service/
├── backend/
│   ├── controller/QRCodeController.java
│   ├── service/QRCodeService.java
│   ├── config/SecurityConfig.java
│   ├── model/QRCodeRequest.java
│   └── util/QRCodeUtil.java
├── frontend/ (built externally)
│   ├── App.jsx
│   └── QRForm.jsx
└── static/ (optional UI embed)


⸻

Session Management
	•	Auth Model: JWT Token passed from parent app to popup UI
	•	Token Transport:
	•	via query param (?token=xyz), OR
	•	via postMessage()
	•	Token Usage: React frontend attaches JWT in API requests:

fetch('/api/qrcode/generate', {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${token}`
  },
  body: formData
});

	•	Spring Security:

@Override
protected void configure(HttpSecurity http) throws Exception {
    http.csrf().disable()
        .authorizeRequests()
        .antMatchers("/api/qrcode/**").authenticated()
        .and()
        .addFilterBefore(jwtTokenFilter(), UsernamePasswordAuthenticationFilter.class);
}


⸻

QR Generation API

Endpoint:
POST /api/qrcode/generate

Request:

Content-Type: multipart/form-data

{
  "url": "https://example.com",
  "name": "Cafe 88",
  "headerText": "Welcome",
  "footerText": "Scan to Join",
  "bgColor": "#ffffff",
  "imageSize": 256,
  "logo": <file>,
  "backgroundImage": <file>
}

Response:

{
  "qrCodeBase64": "data:image/png;base64,..."
}


⸻

Deployment Notes
	•	Frontend can be deployed on Vercel, S3, or inside Spring Boot /static folder
	•	Backend should be served over HTTPS
	•	Ensure secure CORS and JWT expiration handling

⸻

Testing Scenarios
	•	Valid JWT with form data → returns QR code
	•	Expired/missing JWT → 401 error
	•	Custom header/footer rendering
	•	Uploading large files rejected with 50MB max

⸻

Future Enhancements
	•	Download QR code as PNG
	•	Audit trail for generated codes
	•	QR template presets
	•	Admin dashboard for QR code management

⸻

For any integration help or backend changes, contact the QR API service owner.


@startuml
title QR Code Generator Architecture

actor User

rectangle "Parent Web App\n(Session + Auth)" as WebApp {
    User --> WebApp : Logged in\nPasses JWT
}

rectangle "QR Code UI\n(React App as Popup)" as QRUI {
    WebApp --> QRUI : Pass JWT (postMessage or query param)
}

rectangle "QR Code API\n(Spring Boot)" as API {
    QRUI --> API : POST /api/qrcode/generate\n(with JWT)
}

API --> API : Generate QR (ZXing)\nReturn Base64 / PNG

@enduml





={
 {"System","Date","Severity","Count"};

 /* Transnox */
 FILTER({"Transnox",       'Dashboard'!B5:B,  "Critical", 'Dashboard'!C5:C},  LEN('Dashboard'!B5:B));
 FILTER({"Transnox",       'Dashboard'!B5:B,  "High",     'Dashboard'!D5:D},  LEN('Dashboard'!B5:B));

 /* busn-core */
 FILTER({"busn-core",      'Dashboard'!F5:F,  "Critical", 'Dashboard'!G5:G},  LEN('Dashboard'!F5:F));
 FILTER({"busn-core",      'Dashboard'!F5:F,  "High",     'Dashboard'!H5:H},  LEN('Dashboard'!F5:F));

 /* busn-customer */
 FILTER({"busn-customer",  'Dashboard'!J5:J,  "Critical", 'Dashboard'!K5:K},  LEN('Dashboard'!J5:J));
 FILTER({"busn-customer",  'Dashboard'!J5:J,  "High",     'Dashboard'!L5:L},  LEN('Dashboard'!J5:J));

 /* busn-product */
 FILTER({"busn-product",   'Dashboard'!N5:N,  "Critical", 'Dashboard'!O5:O},  LEN('Dashboard'!N5:N));
 FILTER({"busn-product",   'Dashboard'!N5:N,  "High",     'Dashboard'!P5:P},  LEN('Dashboard'!N5:N));

 /* busn-transaction */
 FILTER({"busn-transaction",'Dashboard'!B28:B,"Critical", 'Dashboard'!C28:C}, LEN('Dashboard'!B28:B));
 FILTER({"busn-transaction",'Dashboard'!B28:B,"High",     'Dashboard'!D28:D}, LEN('Dashboard'!B28:B));

 /* busn-user */
 FILTER({"busn-user",      'Dashboard'!F28:F,"Critical",  'Dashboard'!G28:G}, LEN('Dashboard'!F28:F));
 FILTER({"busn-user",      'Dashboard'!F28:F,"High",      'Dashboard'!H28:H}, LEN('Dashboard'!F28:F));

 /* transit-core */
 FILTER({"transit-core",   'Dashboard'!J28:J,"Critical",  'Dashboard'!K28:K}, LEN('Dashboard'!J28:J));
 FILTER({"transit-core",   'Dashboard'!J28:J,"High",      'Dashboard'!L28:L}, LEN('Dashboard'!J28:J));

 /* transit-integration */
 FILTER({"transit-integration",'Dashboard'!N28:N,"Critical",'Dashboard'!O28:O}, LEN('Dashboard'!N28:N));
 FILTER({"transit-integration",'Dashboard'!N28:N,"High",    'Dashboard'!P28:P}, LEN('Dashboard'!N28:N));

 /* transit-parent */
 FILTER({"transit-parent", 'Dashboard'!B54:B,"Critical",  'Dashboard'!C54:C}, LEN('Dashboard'!B54:B));
 FILTER({"transit-parent", 'Dashboard'!B54:B,"High",      'Dashboard'!D54:D}, LEN('Dashboard'!B54:B));

 /* transit-security */
 FILTER({"transit-security",'Dashboard'!F54:F,"Critical", 'Dashboard'!G54:G}, LEN('Dashboard'!F54:F));
 FILTER({"transit-security",'Dashboard'!F54:F,"High",     'Dashboard'!H54:H}, LEN('Dashboard'!F54:F));

 /* transit-utils */
 FILTER({"transit-utils",  'Dashboard'!J54:J,"Critical",  'Dashboard'!K54:K}, LEN('Dashboard'!J54:J));
 FILTER({"transit-utils",  'Dashboard'!J54:J,"High",      'Dashboard'!L54:L}, LEN('Dashboard'!J54:J));

 /* busn-batch */
 FILTER({"busn-batch",     'Dashboard'!N54:N,"Critical",  'Dashboard'!O54:O}, LEN('Dashboard'!N54:N));
 FILTER({"busn-batch",     'Dashboard'!N54:N,"High",      'Dashboard'!P54:P}, LEN('Dashboard'!N54:N));

 /* keynox */
 FILTER({"keynox",         'Dashboard'!B77:B,"Critical",  'Dashboard'!C77:C}, LEN('Dashboard'!B77:B));
 FILTER({"keynox",         'Dashboard'!B77:B,"High",      'Dashboard'!D77:D}, LEN('Dashboard'!B77:B));

 /* keymanager */
 FILTER({"keymanager",     'Dashboard'!F77:F,"Critical",  'Dashboard'!G77:G}, LEN('Dashboard'!F77:F));
 FILTER({"keymanager",     'Dashboard'!F77:F,"High",      'Dashboard'!H77:H}, LEN('Dashboard'!F77:F))
}
